// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum QuoteStatus {
  PENDING
  QUOTED
  ORDERED
  // Agrega más si lo requieres
}

enum UserRole {
  ADMIN
  USER
  // Agrega más roles si los necesitas, por ejemplo:
  // SUPERADMIN
  // MANAGER
  // ...
}

model Branch {
  id        String    @id @default(uuid()) @db.Uuid
  name      String    @unique
  address   String?   // si quieres almacenar la dirección de la sucursal
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt

  // Relación inversa: una sucursal puede tener muchos usuarios
  users     User[]
}



model User {
  id         String      @id @default(uuid()) @db.Uuid
  name       String
  lastname   String
  username   String      @unique
  email      String      @unique
  phone      String?     @unique
  password   String
  role       UserRole      @default(USER)
  isActive   Boolean     @default(true)
  createdAt  DateTime    @default(now())
  updatedAt  DateTime    @updatedAt
  quoteHistories QuoteHistory[]

  branchId String? @db.Uuid

  branch Branch? @relation(fields: [branchId], references: [id], onDelete: Cascade) 
}

model QuoteHistory {
  id         String      @id @default(uuid()) @db.Uuid
  oldStatus  QuoteStatus
  newStatus  QuoteStatus
  changedAt  DateTime    @default(now())

  // Relación con el usuario que hizo el cambio
  userId  String    @db.Uuid
  user    User      @relation(fields: [userId], references: [id])

  // Relación con la cotización modificada
  quoteId String    @db.Uuid
  quote   Quote     @relation(fields: [quoteId], references: [id], onDelete: Cascade)

  // Campo JSON opcional que guarda un "snapshot" parcial o completo de la cotización
  snapshot Json
}




model Customer {
  id        String   @id @default(uuid()) @db.Uuid
  name      String
  lastname  String
  email     String   @unique
  phone     String   @unique
  location  String
  createdAt DateTime @default(now())

  quotes      Quote[]
  chatThreads ChatThread[]
}

model Quote {
  id          String   @id @default(uuid()) @db.Uuid
  createdAt   DateTime @default(now()) // Fecha de creación
  quoteNumber Int // Número de la cotización
  customerId  String   @db.Uuid
  customer    Customer @relation(fields: [customerId], references: [id], onDelete: Cascade)

  items QuoteItem[] // Relación con los items de la cotización

  status      QuoteStatus @default(PENDING)

  fileKey String? 

  chatThreadId  String?     @db.Uuid
  chatThread    ChatThread? @relation(fields: [chatThreadId], references: [id], onDelete: SetNull)

  quoteHistory QuoteHistory[]

  summary String?

  @@index([chatThreadId])
}

model QuoteItem {
  id          String @id @default(uuid()) @db.Uuid
  description String
  ean         String?
  codigo      String?
  quantity    Float
  um          String?

  // Campos opcionales de precio/costo
  price Float? // o Decimal? si requieres mayor precisión
  cost  Float? // o Decimal?

  quoteId String @db.Uuid
  quote   Quote  @relation(fields: [quoteId], references: [id], onDelete: Cascade)
}

model ChatThread {
  id                String    @id @default(uuid()) @db.Uuid
  openAiThreadId    String    @unique
  clientPhoneNumber String
  status            String    @default("ACTIVE")
  createdAt         DateTime  @default(now())
  lastInteraction   DateTime?  @default(now())
  location          String?

  // Relación con Customer (opcional)
  customerId String?   @db.Uuid
  customer   Customer? @relation(fields: [customerId], references: [id], onDelete: Cascade)

  // Relación con mensajes
  messages Message[]

  Quote Quote[]

  
}

model Message {
  id        String   @id @default(uuid()) @db.Uuid
  role      String
  content   String
  createdAt DateTime @default(now())

  // Relación con el hilo de chat
  chatThreadId String     @db.Uuid
  chatThread   ChatThread @relation(fields: [chatThreadId], references: [id], onDelete: Cascade)
}

model Counter {
  name  String @id
  value Int
}
